rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function uid() { return request.auth.uid; }
    function isSuperAdmin() { return isSignedIn() && (request.auth.token.role == 'superadmin'); }

    // Membership-based access
    function isMember(churchId) {
      return isSignedIn() && exists(/databases/$(database)/documents/churches/$(churchId)/memberships/$(uid()));
    }

    function hasRole(churchId, role) {
      return isMember(churchId) && get(/databases/$(database)/documents/churches/$(churchId)/memberships/$(uid())).data.role == role;
    }

    // Churches collection
    match /churches/{churchId} {
      allow read: if true; // public metadata
      allow write: if isSuperAdmin();

      // Subcollections
      match /memberships/{userId} {
        allow read: if isMember(churchId) || isSuperAdmin();
        allow write: if uid() == userId || hasRole(churchId, 'admin') || isSuperAdmin();
      }

      match /sermons/{docId} {
        allow read: if isMember(churchId) || true; // allow public read of sermons
        allow create, update, delete: if hasRole(churchId, 'admin') || isSuperAdmin();
      }

      match /events/{docId} {
        allow read: if true;
        allow create, update, delete: if hasRole(churchId, 'admin') || isSuperAdmin();
        // RSVP field updates allowed to members on the attendees map
        allow update: if isMember(churchId) && request.resource.data.diff(resource.data).changedKeys().hasOnly(['attendees']);
      }

      match /announcements/{docId} {
        allow read: if true;
        allow create, update, delete: if hasRole(churchId, 'admin') || isSuperAdmin();
      }

      match /news/{docId} {
        allow read: if resource.data.status == 'published' || hasRole(churchId, 'admin') || isSuperAdmin();
        allow create, update, delete: if hasRole(churchId, 'admin') || isSuperAdmin();
      }

      match /reports/{docId} {
        allow read: if hasRole(churchId, 'admin') || isSuperAdmin();
        allow create, update, delete: if hasRole(churchId, 'admin') || isSuperAdmin();
      }

      match /payments/{docId} {
        allow read: if uid() == resource.data.userId || hasRole(churchId, 'admin') || isSuperAdmin();
        allow create: if isMember(churchId) && uid() == request.resource.data.userId;
        allow update: if isSuperAdmin(); // Webhooks via Admin SDK
        allow delete: if false;
      }

      match /contribution_pools/{docId} {
        allow read: if isMember(churchId) || true;
        allow create, update, delete: if hasRole(churchId, 'admin') || isSuperAdmin();
      }

      match /tithes/{docId} {
        allow read: if uid() == resource.data.userId || hasRole(churchId, 'pastor') || hasRole(churchId, 'admin') || isSuperAdmin();
        allow create, update: if uid() == request.resource.data.userId || hasRole(churchId, 'pastor') || hasRole(churchId, 'admin') || isSuperAdmin();
        allow delete: if hasRole(churchId, 'admin') || isSuperAdmin();
      }
    }

    // Superadmin ledger
    match /superadmin_ledger/{docId} {
      allow read, write: if isSuperAdmin();
    }
  }
}